#!/usr/bin/env python3

#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

import sys
from datetime import datetime
from time import ctime, strftime, gmtime
from display import Display, Header, Sorter, TimeLong, TimeShort, BodyFormat, PlainNum
import http.client
import json


class Record(object):
    '''
    '''
    def __init__(self, _map):
        self.attributes  = _map
        self.annotations = {}

    def __getattr__(self, __name):
        return self.attributes.get(__name, self.annotations.get(__name, None))

    def __repr__(self):
        str = "%s(%s)" % (self.rtype, self.id)
        if self.name:
            str += "[%s]" % self.name
        return str

    def annotate(self, key, value):
        self.annotations[key] = value



class BusManager:

    def __init__(self, opts):
        self.opts = opts
        self.host = 'skupper-collector'

    def query(self, uri, prefix='/api/v1alpha1'):
        conn = http.client.HTTPConnection(self.host, 8010)
        conn.request('GET', prefix + uri)
        response = conn.getresponse()
        datatext = response.read()
        data     = json.loads(datatext)
        records  = []
        for item in data:
            records.append(Record(item))
        return records

    def close(self):
        pass

    def displayAddresses(self):
        disp = Display(prefix="  ")
        heads = []
        heads.append(Header("address"))
        heads.append(Header("targets"))
        heads.append(Header("total flows"))
        heads.append(Header("current flows"))

        rows = []
        records = self.query('/vanaddrs')

        for addr in records:
            row = []
            row.append(addr.name)
            row.append(addr.connectorCount)
            row.append(addr.totalFlows)
            row.append(addr.currentFlows)
            rows.append(row)
        title = "Service Addresses"
        sorter = Sorter(heads, rows, 'address', 0, True)
        dispRows = sorter.getSorted()
        disp.formattedTable(title, heads, dispRows)

    def displayAddressSummary(self, address):
        listeners  = {}
        connectors = {}
        flows      = {}
        processIds = []
        processes  = {}
        siteIds    = []
        sites      = {}
        routerIds  = []
        routers    = {}

        records = self.query('/flows?vanaddr=' + address)
        for record in records:
            if record.rtype == 'LISTENER':
                listeners[record.id] = record
                if record.parent and record.parent not in routerIds:
                    routerIds.append(record.parent)
            elif record.rtype == 'CONNECTOR':
                connectors[record.id] = record
                if record.parent and record.parent not in routerIds:
                    routerIds.append(record.parent)
            elif record.rtype == 'FLOW':
                flows[record.id] = record
            if record.process and record.process not in processIds:
                processIds.append(record.process)

        if len(processIds) > 0:
            ids = ""
            for id in processIds:
                ids += "id=%s&" % id
            records = self.query('/record?' + ids[:-1])
            for record in records:
                processes[record.id] = record
                if record.parent and record.parent not in siteIds:
                    siteIds.append(record.parent)

        if len(routerIds) > 0:
            ids = ""
            for id in routerIds:
                ids += "id=%s&" % id
            records = self.query('/record?' + ids[:-1])
            for record in records:
                routers[record.id] = record
                if record.parent and record.parent not in siteIds:
                    siteIds.append(record.parent)

        if len(siteIds) > 0:
            ids = ""
            for id in siteIds:
                ids += "id=%s&" % id
            records = self.query('/record?' + ids[:-1])
            for record in records:
                sites[record.id] = record

        flowPairs = []
        for flow in flows.values():
            if flow.parent in listeners:
                if listeners[flow.parent].parent and routers[listeners[flow.parent].parent].parent:
                    flow.annotate('siteName', sites[routers[listeners[flow.parent].parent].parent].name)
                elif flow.process and processes[flow.process].parent:
                    flow.annotate('siteName', sites[processes[flow.process].parent].name)
                flow.annotate('protocol', listeners[flow.parent].protocol)
            elif flow.parent in connectors:
                if flow.counterflow not in flows:
                    print("Dangling counterflow: %s" % flow.counterflow)
                flowPairs.append((flows[flow.counterflow] if flow.counterflow in flows else None, flow))
                if connectors[flow.parent].parent and routers[connectors[flow.parent].parent].parent:
                    flow.annotate('siteName', sites[routers[connectors[flow.parent].parent].parent].name)
                elif flow.process and processes[flow.process].parent:
                    flow.annotate('siteName', sites[processes[flow.process].parent].name)
                if not flow.process:
                    flow.annotate('destHost', connectors[flow.parent].destHost)

        disp = Display(prefix="  ")
        heads = []
        heads.append(Header("addr"))
        heads.append(Header("proto"))
        heads.append(Header("c.site"))
        heads.append(Header("c.proc"))
        heads.append(Header("c.port"))
        heads.append(Header("c.oct"))
        heads.append(Header("c.rate"))
        heads.append(Header("c.uack"))
        heads.append(Header("c.stal"))
        heads.append(Header("c.lat"))
        heads.append(Header("s.oct"))
        heads.append(Header("s.rate"))
        heads.append(Header("s.uack"))
        heads.append(Header("c.stal"))
        heads.append(Header("s.lat"))
        heads.append(Header("s.proc"))
        heads.append(Header("s.port"))
        heads.append(Header("s.site"))

        rows = []
        for pair in flowPairs:
            row = []
            row.append(address)
            row.append(pair[0].protocol if pair[0] else '-')
            row.append(pair[0].siteName if pair[0] else '-')
            row.append((processes[pair[0].process].name if pair[0].process else pair[0].sourceHost) if pair[0] else '-')
            row.append(pair[0].sourcePort if pair[0] else '-')
            row.append(pair[0].octets if pair[0] else '-')
            row.append(pair[0].octetRate if pair[0] else '-')
            row.append(pair[0].octetsUnacked if pair[0] else '-')
            row.append(pair[0].windowClosures if pair[0] else '-')
            row.append(pair[0].latency if pair[0] else '-')
            row.append(pair[1].octets if pair[1] else '-')
            row.append(pair[1].octetRate if pair[1] else '-')
            row.append(pair[1].octetsUnacked if pair[1] else '-')
            row.append(pair[1].windowClosures if pair[1] else '-')
            row.append(pair[1].latency if pair[1] else '-')
            row.append((processes[pair[1].process].name if pair[1].process else pair[1].destHost) if pair[1] else '-')
            row.append(connectors[pair[1].parent].destPort if pair[1] else '-')
            row.append(pair[1].siteName if pair[1] else '-')
            rows.append(row)
        title = "Flows for address %s" % address
        disp.formattedTable(title, heads, rows)


    def displaySites(self):
        disp = Display(prefix="  ")
        heads = []
        heads.append(Header("site"))
        heads.append(Header("namespace"))
        heads.append(Header("location"))
        heads.append(Header("provider"))
        heads.append(Header("platform"))

        rows = []
        records = self.query("/sites")

        for site in records:
            row = []
            row.append(site.name)
            row.append(site.namespace)
            row.append(site.location)
            row.append(site.provider)
            row.append(site.platform)
            rows.append(row)
        title = "Network Sites"
        sorter = Sorter(heads, rows, 'site', 0, True)
        dispRows = sorter.getSorted()
        disp.formattedTable(title, heads, dispRows)

def run(argv):
    bm = BusManager(argv[1:])
    try:
        if len(argv) == 2 and argv[1] == '-a':
            bm.displayAddresses()
        elif len(argv) == 3 and argv[1] == '-a':
            bm.displayAddressSummary(argv[2])
        elif len(argv) == 2 and argv[1] == '-s':
            bm.displaySites()
    finally:
        bm.close()


if __name__ == "__main__":
    sys.exit(run(sys.argv))
