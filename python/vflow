#!/usr/bin/env python3

#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

import sys
from datetime import datetime
from time import ctime, strftime, gmtime
from display import Display, Header, Sorter, TimeLong, TimeShort, BodyFormat, PlainNum
import http.client
import json


class Record(object):
    '''
    '''
    def __init__(self, _map):
        self.attributes = _map

    def __getattr__(self, __name):
        return self.attributes.get(__name, "")



class BusManager:

    def __init__(self, opts):
        self.opts = opts
        self.host = 'skupper-collector'

    def query(self, uri, prefix='/api/v1alpha1'):
        conn = http.client.HTTPConnection(self.host, 8010)
        conn.request('GET', prefix + uri)
        response = conn.getresponse()
        datatext = response.read()
        data     = json.loads(datatext)
        records  = []
        for item in data:
            records.append(Record(item))
        return records

    def close(self):
        pass

    def displayAddresses(self):
        disp = Display(prefix="  ")
        heads = []
        heads.append(Header("address"))
        heads.append(Header("targets"))
        heads.append(Header("total flows"))
        heads.append(Header("current flows"))

        rows = []
        records = self.query('/vanaddrs')

        for addr in records:
            row = []
            row.append(addr.name)
            row.append(addr.connectorCount)
            row.append(addr.totalFlows)
            row.append(addr.currentFlows)
            rows.append(row)
        title = "Service Addresses"
        sorter = Sorter(heads, rows, 'address', 0, True)
        dispRows = sorter.getSorted()
        disp.formattedTable(title, heads, dispRows)

    def displayAddressSummary(self, address):
        pass

    def displaySites(self):
        disp = Display(prefix="  ")
        heads = []
        heads.append(Header("site"))
        heads.append(Header("namespace"))
        heads.append(Header("location"))
        heads.append(Header("provider"))
        heads.append(Header("platform"))

        rows = []
        records = self.query("/sites")

        for site in records:
            row = []
            row.append(site.name)
            row.append(site.namespace)
            row.append(site.location)
            row.append(site.provider)
            row.append(site.platform)
            rows.append(row)
        title = "Network Sites"
        sorter = Sorter(heads, rows, 'site', 0, True)
        dispRows = sorter.getSorted()
        disp.formattedTable(title, heads, dispRows)

def run(argv):
    bm = BusManager(argv[1:])
    try:
        if len(argv) == 2 and argv[1] == '-a':
            bm.displayAddresses()
        elif len(argv) == 3 and argv[1] == '-a':
            bm.displayAddressSummary(argv[2])
        elif len(argv) == 2 and argv[1] == '-s':
            bm.displaySites()
    finally:
        bm.close()


if __name__ == "__main__":
    sys.exit(run(sys.argv))
